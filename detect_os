#!/bin/bash

config="supported_os.yml"
os_release=1 # /etc/os-release more reliable, so use it by default
os_release_file="/etc/os-release"
get_version=0 # Fetch OS name by default

usage()
{
    echo -e "detect_os"
    echo -e "\t Detects the OS that the system is currently using and prints it out"
    echo -e "Options"

    echo -e "\t --uname"
    echo -e "\t\t Determine the current OS using 'uname -a' output"
    echo -e "\t\t Combining this option with --os-release produces undefined behavior"

    echo -e "\t --os-release"
    echo -e "\t\t Determine the current OS using the /etc/os-release file"
    echo -e "\t\t Combining this option with --uname produces undefined behavior"

    echo -e "\t --os-version"
    echo -e "\t\t Determine the current OS version"
    echo -e "\t\t Works with --uname and --os-release"

    echo -e "\t -h/--help/--usage"
    echo -e "\t\t Displays this message"

    exit 0
}

echo_stderr() {
    echo ${@:1} > /dev/stderr
}

os_release_get_os_name()
{
    if [ ! -f $os_release_file ];then
        echo_stderr Could not find file $os_release_file, aborting
        exit 1
    fi

    local os_id=`grep '^ID=' $os_release_file | cut -d'=' -f2 | sed -e "s/\"\|'//g"`

    local config_len=`yq '. | length' $config`
    for i in `seq 0 $config_len`;do
        local identifier=`yq -r ".[$i].identifier" $config`
        
         if [ $identifier = $os_id ]; then
            echo $identifier
            exit 0
        fi
    done

    echo_stderr Unknown os \"$os_id\", check $config to make sure it exists
}

uname_get_os_name()
{
    local kinfo=`uname -a`

    local config_len=`yq '. | length' $config`
    for i in `seq 0 $config_len`;do
        local pattern=`yq -r ".[$i].uname_pattern" $config`
        local identifier=`yq -r ".[$i].identifier" $config`
        
         if `echo $kinfo | grep -Eq $pattern`; then
            echo $identifier
            exit 0
        fi
    done

    echo_stderr No known uname pattern matches, check $config to ensure that a pattern matches the following uname line
    echo_stderr $kinfo
    exit 1
}

uname_get_os_version()
{
    local kinfo=`uname -a`

    local config_len=`yq '. | length' $config`
    for i in `seq 0 $config_len`;do
        local pattern=`yq -r ".[$i].uname_pattern" $config`
        local identifier=`yq -r ".[$i].identifier" $config`
        local ver_pattern=`yq -r ".[$i].uname_version_pattern" $config`
        
        local os_match=`echo $kinfo | grep -Eo $pattern`

        if [ ! -z $os_match ]; then
            echo $os_match | grep -Eo $ver_pattern
            exit 0
        fi
    done

    echo_stderr No known uname pattern matches, check $config to ensure that a pattern matches the following uname line
    echo_stderr $kinfo
    exit 1
}

os_release_get_version()
{
    if [ ! -f $os_release_file ];then
        echo_stderr Could not find file $os_release_file, aborting
        exit 1
    fi

    local os_id=`grep '^ID=' $os_release_file | cut -d'=' -f2 | sed -e "s/\"\|'//g"`
    local version=`grep '^VERSION_ID=' $os_release_file | cut -d'=' -f2 | sed -e "s/\"\|'//g"`

    local config_len=`yq '. | length' $config`
    for i in `seq 0 $config_len`;do
        local identifier=`yq -r ".[$i].identifier" $config`
        
         if [ $identifier = $os_id ]; then
            echo $version
            exit 0
        fi
    done

    echo_stderr Unknown os \"$os_id\", check $config to make sure it exists
}

NOARG_OPTS=(
    "uname"
    "h"
    "help"
    "os-version"

    "usage"
    "os-release"
)

opts=$(getopt \
    --longoptions "$(printf "%s," "${NOARG_OPTS[@]}")" \
    --name "$(basename "$0")" \
    --options "h" \
    -- "$@"
)

if [ $? -ne 0 ]; then
        exit 1
fi

eval set --$opts

while [[ $# -gt 0 ]]; do
	case "$1" in
    -h | --usage | --help)
        usage
    ;;
    --uname)
        os_release=0
        shift 1
    ;;
    --os-release)
        os_release=1
        shift 1
    ;;
    --os-version)
        get_version=1
        shift 1
    ;;
    --)
        break
    ;;
    *)
        echo_stderr Unknown option $1
        exit 1
    ;;
    esac
done


if [ $get_version -eq 0 ]; then
    if [ $os_release -eq 1 ]; then
        os_release_get_os_name
    else
        uname_get_os_name
    fi
else
    if [ $os_release -eq 1 ];then
        os_release_get_version
    else
        uname_get_os_version
    fi
fi

exit 0
