#!/bin/bash

exit_rtc=0
base_results_file=""

usage()
{
	echo Usage: $1
	echo "  --fields <string>: Contains a list in the following format"
	echo "       name:type,name:type"
	echo "    Valid types are"
	echo "     n: field is a numeric value"
	echo "     s: field is a string of some sort"
	echo "     sm: field is a string and must match exactly the name"
	echo "  --header_lines <n>: How many lines of header do we we expect."
	echo "  --results_file <path>: The results file generated by the test"
	echo "  --base_results_file <path>:  The path to the expected results that we are"
	echo "     to compare to."
	exit $2
}

error_out()
{
	echo $4
	echo $3
	echo field index checking: $1
	echo field type: $2
	exit 1
}

validate_lines()
{
	while IFS= read -r test_info
	do
		regexp=`echo "$test_info" |  cut  -f 1`
		string=`echo "$test_info" |  cut  -f 2`
		echo $string | grep -E -q "$regexp"
		if [[ $? -ne 0 ]]; then
			echo "Error: Field regex mismatch, $regexp we have $string"
			exit_rtc=1
		fi
	done < "$1"
}

ARGUMENT_LIST=(
	"fields"
	"header_lines"
	"results_file"
	"base_results_file"
)
NO_ARGUMENTS=(
	"usage"
)
# read arguments
opts=$(getopt \
  --longoptions "$(printf "%s:," "${ARGUMENT_LIST[@]}")" \
  --longoptions "$(printf "%s," "${NO_ARGUMENTS[@]}")" \
  --name "$(basename "$0")" \
  --options "h" \
  -- "$@"
)

eval set --$opts

results_file=""
fields=""
header_lines=0

while [[ $# -gt 0 ]]; do
	case "$1" in
		--base_results_file)
			base_results_file=$2
			shift 2
		;;
		--fields)
			fields=`echo $2 | sed "s/ /_/g" | sed "s/,/ /g"`
			shift 2
		;;
		--header_lines)
			header_lines=$2
			shift 2
		;;
		--results_file)
			results_file=$2
			shift 2
		;;
		--usage)
			usage $0 0
		;;
		-h)
			usage $0 0
		;;
		--)
			break;
		;;
		*)
			echo "option not found ${1}"
			usage $0 1
		;;
	esac
done

meta_head=0
meta_test=0
header_line=""
field_location=""
separ=""
field_index=1
rm -f tmp_results compare_file
while IFS= read -r test_info
do
	#
	# Skip over meta head
	#
	if [[ $test_info == *"# Test general meta start"* ]]; then
		meta_head=1
		continue
	fi
	if [[ $test_info == *"Test general meta end"* ]] then
		meta_head=0
		continue
	fi
	if [[ $test_info == *"Test meta data start"* ]] then
		meta_test=1
		continue
	fi
	if [[ $test_info == *"Test meta data end"* ]] then
		meta_test=0
		continue
	fi
	if  [[ $meta_test -eq 1 ]] || [[ $meta_head -eq 1 ]]; then
		continue
	fi
	echo $test_info >> tmp_results
done < "$results_file"
paste $base_results_file tmp_results > compare_file
validate_lines compare_file
rm compare_file
exit $exit_rtc
