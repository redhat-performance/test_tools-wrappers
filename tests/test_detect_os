#!/bin/bash

actual_os=""
os_ver=""
os_ver_uname=""

EXEC_FILE="./detect_os"

test_os_release=1
test_uname=1

usage()
{
    echo -e "test_detect_os --os <ACTUAL OS> --os-version <OS VERSION> --os-version-uname <OS VERSION>"
    echo -e "\t Tests the detect_os script"

    echo -e "Options:"
    echo -e "\t --os <string> (required)"
    echo -e "\t\t Sets the os currently running to validate detect_os's output"

    echo -e "\t --os-version <string>"
    echo -e "\t\t Sets the version of the currently running OS to validate against detect_os's output (os-release mode)"
    echo -e "\t\t If not set, this test will be skipped"

    echo -e "\t -h/--help/--usage"
    echo -e "\t\t Shows this message"

    exit 0
}

NOARG_OPTS=(
    "h"
    "help"
    "usage"
)

OPTS=(
    "c"
    "config"

    "os"
    "os-version"
    "os-version-uname"
)

opts=$(getopt \
    --longoptions "$(printf "%s," "${NOARG_OPTS[@]}")" \
    --longoptions "$(printf "%s:," "${OPTS[@]}")" \
    --name "$(basename "$0")" \
    --options "h" \
    -- "$@"
)

if [ $? -ne 0 ]; then
        exit 1
fi

while [[ $# -gt 0 ]]; do
	case "$1" in
    -h | --usage | --help)
        usage
    ;;
    --os)
        actual_os=$2
        shift 2
    ;;
    --os-version)
        os_ver=$2
        shift 2
    ;;
    --os-version-uname)
        os_ver_uname=$2
        shift 2
    ;;
    --)
        break;
    ;;
    *)
        echo "Unknown option $1" > /dev/stderr
        exit 1
    ;;
    esac
done


if [ -z $actual_os ];then
    usage
fi

source "./tests/assert.sh"

assert "$EXEC_FILE" "$actual_os"

if [ ! -z $os_ver ]; then
    assert "$EXEC_FILE --os-version" "$os_ver"
fi
assert_end

exit 0