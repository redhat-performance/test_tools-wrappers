#!/bin/bash
#
# Copyright (C) 2025  David Valin dvalin@redhat.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
#
# General information
#
# Script is used to generate a set of intervals for a given max value.
# An interval is considered to be x,y.  So a request of 4 intervals for
# 100 would be 1,25,50,75,100.  Note, if the interval does not work out so
# the last number is max_value, such as interval=4 and max_value=99, you will
# get 1,24,48,72,96,99.
#

usage()
{
	echo "Usage: $1"
	echo "  --interval <x>: create x intervals (default is 4)."
	echo "  --max_value  <x>: Maximum value to go to."
	exit 0
}

interval=0
max_value=0

ARGUMENT_LIST=(
	"interval"
	"max_value"
)

NO_ARGUMENTS=(
        "usage"
)

# read arguments
opts=$(getopt \
    --longoptions "$(printf "%s:," "${ARGUMENT_LIST[@]}")" \
    --longoptions "$(printf "%s," "${NO_ARGUMENTS[@]}")" \
    --name "$(basename "$0")" \
    --options "h" \
    -- "$@"
)

if [ $? -ne 0 ]; then
	exit 1
fi

eval set --$opts

while [[ $# -gt 0 ]]; do
	case "$1" in
		--interval)
			interval=$2
			shift 2
		;;
		--max_value)
			max_value=$2
			shift 2
		;;
		--usage)
			usage $0
		;;
		-h)
			usage $0
		;;
		--)
			break;
		;;
		*)
			echo option not found $1
			usage $0
		;;
	esac
done

#
# Make sure the provided values are valid.
#
if [[ $max_value -lt 1 ]] || [[ $interval  -lt 1 ]]; then
	echo Need to designate a positive non-zero value for
	echo "--max_value and --interval"
	exit 1
fi

if [[ $interval -gt $max_value ]]; then
	echo Error, number of intervals may not exceed the max_value.
	exit 1
fi

#
# If only one interval requested, it is 1,$max_valuem
# else calculate the intervals.
#
if [[ $interval -ne 1 ]]; then
	stepping=`echo $max_value/$interval | bc`
	interval_seq=1
	for value in `seq $stepping $stepping $max_value`
	do
		interval_seq=${interval_seq},${value}
	done
	#
	# Do not forget $max_value, if we have not already set it.
	#
	if [[ $value -ne $max_value ]]; then
		interval_seq=${interval_seq},${max_value}
	fi
else
	interval_seq="1,$max_value"
fi
echo $interval_seq
exit 0
